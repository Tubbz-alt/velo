/*******************************************************************************
 * .
 *                           Velo 1.0
 *  ----------------------------------------------------------
 * 
 *            Pacific Northwest National Laboratory
 *                      Richland, WA 99352
 * 
 *                      Copyright (c) 2013
 *            Pacific Northwest National Laboratory
 *                 Battelle Memorial Institute
 * 
 *   Velo is an open-source collaborative content management
 *                and job execution environment
 *              distributed under the terms of the
 *           Educational Community License (ECL) 2.0
 *   A copy of the license is included with this distribution
 *                   in the LICENSE.TXT file
 * 
 *                        ACKNOWLEDGMENT
 *                        --------------
 * 
 * This software and its documentation were developed at Pacific 
 * Northwest National Laboratory, a multiprogram national
 * laboratory, operated for the U.S. Department of Energy by 
 * Battelle under Contract Number DE-AC05-76RL01830.
 ******************************************************************************/
package gov.pnnl.cat.ui.rcp.actions.jobs;

import gov.pnnl.cat.core.resources.CmsPath;
import gov.pnnl.cat.core.resources.IFolder;
import gov.pnnl.cat.core.resources.IResource;
import gov.pnnl.cat.core.resources.ResourceException;
import gov.pnnl.cat.logging.CatLogger;
import gov.pnnl.cat.ui.rcp.adapters.ITransferObjectAdapter;
import gov.pnnl.cat.ui.rcp.dialogs.ErrorDialogs;
import gov.pnnl.cat.ui.rcp.dialogs.FileDialogs;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.swt.widgets.Shell;

/**
 */
public class DeleteJob extends AbstractRepositoryJob {
  public static final String DELETE_LINKS = "delete links";
  private List<CmsPath> vecResourcesToDelete = new ArrayList<CmsPath>();
  private Logger logger = CatLogger.getLogger(this.getClass());
  private boolean silent = false;

  /**
   * Constructor for DeleteJob.
   * @param sourcePaths String[]
   * @param shell Shell
   */
  public DeleteJob(String[] sourcePaths, Shell shell) {
    super(sourcePaths, shell);
  }

  /**
   * Method getDestination.
   * @param currentFile ITransferObjectAdapter
   * @return CmsPath
   * @throws ResourceException
   */
  public CmsPath getDestination(ITransferObjectAdapter currentFile) throws ResourceException{
    try {
      IFolder parentFolder = (IFolder)((IResource)currentFile.getObject()).getParent();
      return parentFolder.getPath();
    } catch (ResourceException e) {
      //EZLogger.logError(e, "Cannot delete folder - cannot find parent");
      logger.error("Cannot delete folder - cannot find parent",e);
      throw e;
    }
  }

  /**
   * Method setSilent.
   * @param silent boolean
   */
  public void setSilent(boolean silent) {
    this.silent = silent;
  }
  
  

  /* (non-Javadoc)
   * need to override so we can not check existence for every file
   * @see gov.pnnl.cat.ui.rcp.actions.jobs.AbstractRepositoryJob#run(org.eclipse.core.runtime.IProgressMonitor)
   */
  @Override
  protected IStatus run(IProgressMonitor monitor) {
    long startCounting = System.currentTimeMillis();
    
    monitor.setTaskName("Preparing to " + getJobType() + " Files...");

    HashMap dialogAnswers = new HashMap();

    ITransferObjectAdapter[] sourceTransferFiles = getSourceFiles();

    if (canRun(sourceTransferFiles)) {
      begin = System.currentTimeMillis();
      for (int i = 0; i < sourceTransferFiles.length; i++) {

        ITransferObjectAdapter currentFile = sourceTransferFiles[i];
        try {
          if (canStartOperation(currentFile, getDestination(currentFile))) {
            operate(currentFile, getDestination(currentFile), dialogAnswers, monitor, false);
          }
        } catch (ResourceException e) {
          logger.error("Resource can not be processed: " + currentFile.getPath(), e);
          ErrorDialogs.openErrorMessage(null, "Transfer Error", "Resource can not be processed: " + currentFile.getPath(), e);
        }
        if (monitor.isCanceled() || isOperationCanceled()) {
          return Status.CANCEL_STATUS;
        }
      }
    }
    long endCounting = System.currentTimeMillis();
    
    logger.debug("Time to count files: " + (endCounting - startCounting) + " ms");
    
    jobTraversalComplete(monitor);

    if(logger.isDebugEnabled()) {
      long end = System.currentTimeMillis();
      logger.debug(getJobType() + " COMPLETE: TOOK " + (end - begin) + " ms");
    }
    return Status.OK_STATUS;
  }

  /*
   * The destination path for delete will actually be the
   * path to the resource being deleted.
   * 
   *  (non-Javadoc)
   * @see gov.pnnl.cat.ui.rcp.actions.jobs.AbstractRepositoryJob#resolveDestinationPath(gov.pnnl.cat.ui.rcp.adapters.ITransferObjectAdapter, gov.pnnl.cat.core.resources.IFolder)
   */
  /**
   * Method resolveDestinationPath.
   * @param currentFile ITransferObjectAdapter
   * @param destination CmsPath
   * @return CmsPath
   */
  public CmsPath resolveDestinationPath(ITransferObjectAdapter currentFile, CmsPath destination) {
    return ((IResource) currentFile.getObject()).getPath();
  }

  /**
   * Method getJobType.
   * @return String
   */
  public String getJobType() {
    return "Delete";
  }

  /**
   * Method getJobDescription.
   * @return String
   */
  public String getJobDescription() {
    return "Deleting File";
  }

  /**
   * Method canRun.
   * @param selectedResources ITransferObjectAdapter[]
   * @return boolean
   */
  protected boolean canRun(ITransferObjectAdapter[] selectedResources) {
    return silent || FileDialogs.confirmDeleteDialog(shell, selectedResources);
  }

  /**
   * Method checkFolderOperation.
   * @param destination CmsPath
   * @param newDestinationFolderPath CmsPath
   * @param dialogAnswers HashMap<String,Integer>
   * @return boolean
   * @throws ResourceException
   */
  public boolean checkFolderOperation(CmsPath destination, CmsPath newDestinationFolderPath, HashMap<String, Integer> dialogAnswers) throws ResourceException {
    //return checkResourceOperation(destination, newDestinationFolderPath, dialogAnswers);
    return true;
  }

  /**
   * Method checkFileOperation.
   * @param filePath CmsPath
   * @param dialogAnswers HashMap<String,Integer>
   * @return boolean
   * @throws ResourceException
   */
  protected boolean checkFileOperation(CmsPath filePath, HashMap<String, Integer> dialogAnswers) throws ResourceException {
    return checkResourceOperation(filePath, dialogAnswers);
  }

  /**
   * Method doFileTransfer.
   * @param transferFile ITransferObjectAdapter
   * @param resolvedDestination CmsPath
   * @param monitor IProgressMonitor
   * @throws ResourceException
   * @throws FileNotFoundException
   */
  public void doFileTransfer(ITransferObjectAdapter transferFile, CmsPath resolvedDestination, IProgressMonitor monitor) throws ResourceException, FileNotFoundException {
    vecResourcesToDelete.add(resolvedDestination);
  }
  
  //any jobs that use CML statement we can't really monitor the progress
  /**
   * Method getTotalWork.
   * @return int
   */
  public int getTotalWork() {
    return IProgressMonitor.UNKNOWN;
  }
  
  /**
   * Method jobTraversalComplete.
   * @param monitor IProgressMonitor
   */
  public void jobTraversalComplete(IProgressMonitor monitor) {
    
    try {
      monitor.subTask("Server Executing Request");
      getManager().deleteResources(vecResourcesToDelete);
      monitor.subTask("Delete Job Completed");
    } catch (ResourceException e) {
      logger.error("Failed to delete files.", e);
      ErrorDialogs.openErrorMessage(null, "Cannot Delete Files", "Failed to delete files.", e);
    }

  }

  /**
   * Method checkResourceOperation.
   * @param filePath CmsPath
   * @param dialogAnswers HashMap<String,Integer>
   * @return boolean
   * @throws ResourceException
   */
  protected boolean checkResourceOperation(CmsPath filePath, HashMap<String, Integer> dialogAnswers) throws ResourceException {
    if (isOperationCanceled()) {
      return false;
    }

//    // used if the user specifies "No to all" from a dialog
//    boolean cannotDeleteLinks = false;
//    int deleteLinksValue = getDialogValue(dialogAnswers, DELETE_LINKS);
//
//    // we need to check the map's OVERWRITE_FOLDER value since this applies to its child files
//    if (deleteLinksValue == IDialogConstants.YES_TO_ALL_ID) {
//      return true;
//    } else if (deleteLinksValue == IDialogConstants.NO_TO_ALL_ID) {
//      // need to check if the resource actually has links
//      // if it doesn't, we can still return true
//      // if it does, we must return false.
//      cannotDeleteLinks = true;
//    }
//
//    // prompt if user should delete links
//    Collection links = getManager().getResourcesLinkedToPath(filePath);
//    boolean hasLinks = !links.isEmpty();
//    IResource resourceToDelete;
//    
//    if (hasLinks) {
//      // if the user doesn't want to be deleting files that
//      // have links, then we must return false, indicating
//      // that we cannot operate on this resource
//      if (cannotDeleteLinks) {
//        return false;
//      }
//
//      resourceToDelete = getManager().getResource(filePath);
//      int dialogAnswer = FileDialogs.confirmDeleteResourceLinksDialog(shell, resourceToDelete, links);
//
//      return putDialogValue(dialogAnswers, DELETE_LINKS, dialogAnswer);
//    }

    return true;
  }

  /**
   * Method doFolderTransfer.
   * @param transferFolder ITransferObjectAdapter
   * @param originalDestination CmsPath
   * @param newDestination CmsPath
   * @param monitor IProgressMonitor
   * @return boolean
   * @throws ResourceException
   * @throws FileNotFoundException
   */
  public boolean doFolderTransfer(ITransferObjectAdapter transferFolder, CmsPath originalDestination, CmsPath newDestination, IProgressMonitor monitor) throws ResourceException, FileNotFoundException {
    //ZG 5/15/07: treat a folder now the same as a file or link - just add it to the list of items to delete:
    vecResourcesToDelete.add(newDestination);
    return true;
  }

  
  /**
   * Method doPreFileTransfer.
   * @param resolvedDestination CmsPath
   * @throws ResourceException
   */
  public void doPreFileTransfer(CmsPath resolvedDestination) throws ResourceException {  }//don't do anything
}
