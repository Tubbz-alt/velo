/*******************************************************************************
 * .
 *                           Velo 1.0
 *  ----------------------------------------------------------
 * 
 *            Pacific Northwest National Laboratory
 *                      Richland, WA 99352
 * 
 *                      Copyright (c) 2013
 *            Pacific Northwest National Laboratory
 *                 Battelle Memorial Institute
 * 
 *   Velo is an open-source collaborative content management
 *                and job execution environment
 *              distributed under the terms of the
 *           Educational Community License (ECL) 2.0
 *   A copy of the license is included with this distribution
 *                   in the LICENSE.TXT file
 * 
 *                        ACKNOWLEDGMENT
 *                        --------------
 * 
 * This software and its documentation were developed at Pacific 
 * Northwest National Laboratory, a multiprogram national
 * laboratory, operated for the U.S. Department of Energy by 
 * Battelle under Contract Number DE-AC05-76RL01830.
 ******************************************************************************/
package gov.pnnl.velo.tif.jobhandlers;



import gov.pnnl.velo.jobs.model.InputFile;
import gov.pnnl.velo.jobs.model.LaunchConfiguration;
import gov.pnnl.velo.jobs.util.RegistryConstants;
import gov.pnnl.velo.util.LocalFileSystemExporter;
import gov.pnnl.velo.util.VeloConstants;
import gov.pnnl.velo.util.WikiUtils;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Vector;

import org.alfresco.model.ContentModel;
import org.alfresco.repo.content.filestore.FileContentReader;
import org.alfresco.service.cmr.repository.ChildAssociationRef;
import org.alfresco.service.cmr.repository.ContentService;
import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.repository.NodeService;
import org.alfresco.service.cmr.view.ExporterCrawlerParameters;
import org.alfresco.service.cmr.view.ExporterService;
import org.alfresco.service.cmr.view.Location;
import org.alfresco.util.TempFileProvider;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.SystemUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.kepler.job.JobException;
import org.kepler.job.JobStatusInfo;
import org.kepler.ssh.ExecException;

/**
 * Empty job completion handler that can be used when
 * testing job launcher from command line
 * @author Chandrika Sivaramakrishnan
 *
 * @version $Revision: 1.0 $
 */
public class DefaultCmsJobHandler extends AbstractJobHandler {
  private static final Log log = LogFactory.getLog(DefaultCmsJobHandler.class
			.getName());
  
  protected NodeService nodeService;
  protected ContentService contentService;
  protected ExporterService exporterService;

  /**
   * Method jobBeforeSubmit.
   * @throws JobException
   * @throws ExecException
   * @see gov.pnnl.velo.jobs.handlers.JobHandler#jobBeforeSubmit()
   */
  @Override
  public void jobBeforeSubmit() throws JobException, ExecException {
	  System.out.println("In DefaultCmsJobHandler Job BeforeSubmitted");
	  log.debug("In DefaultCmsJobHandler Job BeforeSubmitted");
	  updateStatusOnServer(VeloConstants.STATUS_SUBMITTING, null);
  }

  /**
   * Method jobSubmitted.
   * @param status JobStatusInfo
   * @throws JobException
   * @throws ExecException
   * @see gov.pnnl.velo.jobs.handlers.JobHandler#jobSubmitted(JobStatusInfo)
   */
  @Override
  public void jobSubmitted(JobStatusInfo status) throws JobException, ExecException {
    System.out.println("In DefaultCmsJobHandler Job Submitted");  
    log.debug("In DefaultCmsJobHandler Job Submitted");  
    setJobSubmitProperties(status);
  }

  /**
   * Method jobStarted.
   * @param status JobStatusInfo
   * @throws JobException
   * @throws ExecException
   * @see gov.pnnl.velo.jobs.handlers.JobHandler#jobStarted(JobStatusInfo)
   */
  @Override
  public void jobStarted(JobStatusInfo status) throws JobException, ExecException {
    System.out.println("In DefaultCmsJobHandler Job Started");
    log.debug("In DefaultCmsJobHandler Job Started");
    setJobStartProperties(status);
  }
  
  /**
   * Method jobRunning.
   * @param status JobStatusInfo
   * @throws JobException
   * @throws ExecException
   * @see gov.pnnl.velo.jobs.handlers.JobHandler#jobRunning(JobStatusInfo)
   */
  @Override
  public void jobRunning(JobStatusInfo status) throws JobException, ExecException {
    System.out.println("In DefaultCmsJobHandler  Job Running");
    log.debug("In DefaultCmsJobHandler  Job Running");
  }

  /**
   * Method jobComplete.
   * @param status JobStatusInfo
   * @param launchConfig LaunchConfiguration
   * @throws JobException
   * @throws ExecException
   * @see gov.pnnl.velo.jobs.handlers.JobHandler#jobComplete(JobStatusInfo, LaunchConfiguration)
   */
  @Override
  public void jobComplete(JobStatusInfo status, LaunchConfiguration launchConfig) throws JobException, ExecException {
    System.out.println("In DefaultCmsJobHandler Job Completed");
    log.debug("In DefaultCmsJobHandler Job Completed");
    setJobCompleteProperties();
  }
  
  
  @Override
  public File prepareLocalStagingDirectory() throws Exception {
    try {
      File localStagingDir = getLocalStagingDirectory(launchConfig);
      initializeInputsOutputsLocalWorkingDir(localStagingDir, launchConfig);
      return localStagingDir;
      
    } catch (RuntimeException e) {
      throw e;
    
    } catch (Throwable e) {
      throw new RuntimeException("Failed to stage files to local folder.", e);
    }

  }

  @Override
  public void transferFiles() throws Exception {
    Vector<File> files = launchConfig.getInputfiles();

    // ==== 2. Stage local files to remote dir on job machine ====//
    // Stage local files
    execInterface.copyTo(files, launchConfig.getJobDirectory(), true);
    
    if(launchConfig.getSchedulerName().equals("Fork") 
        && !launchConfig.getJobDirectory().equals(launchConfig.getSchedulerPath())){
      //if Fork script needs to be copied to a path different from jobDirectory
      execInterface.copyTo(new File(launchConfig.getLocalStagingDirectory(), "jmgr-fork.sh"), launchConfig.getSchedulerPath(), false);
    }
  }
  
  protected File getLocalStagingDirectory(LaunchConfiguration launchConfig) {

    File localWorkingDir = null;

    // If this is a local job, then we just use the jobDirectory, otherwise, create a temporary directory
    if(launchConfig.isLocalhost()) {
      localWorkingDir = new File(launchConfig.getJobDirectory());
      
    } else {
      //1. create temporary dir for collecting files this job.. is a long life (24 hours) good enough? do we even need that?
      if(launchConfig.getToolRunId()!=null){
        localWorkingDir = TempFileProvider.getLongLifeTempDir(launchConfig.getToolRunId());//getToolUuid is returning null
    
      } else {
        logger.warn("JobLaunchingService : GetToolRunId returned null. Constructing it locally");
        logger.debug("remoteuser - " + launchConfig.getRemoteUsername());
        logger.debug("tool code id - " + launchConfig.getTool().getCodeID());
        launchConfig.setToolRunId(launchConfig.getRemoteUsername() +  "_"
            + launchConfig.getTool().getCodeID()
            +"_" + System.currentTimeMillis());
        localWorkingDir = TempFileProvider.getLongLifeTempDir(launchConfig.getToolRunId());   
      }
    }
    return localWorkingDir;
  
  }
  
  /**
   * Method initializeInputsOutputsLocalWorkingDir.
   * @param launchConfig LaunchConfiguration
   * @throws Exception
   */
  private void initializeInputsOutputsLocalWorkingDir(File serverLocalWorkingDir, LaunchConfiguration launchConfig) throws Exception {
    long start = System.currentTimeMillis();
    // check if input files should be staged from local working dir
    // doing it here so that in case of missing inputs exception can
    // be thrown before even connecting to the remote host
    Vector<File> inputfiles = new Vector<File>();
    
    NodeRef inputFolder = WikiUtils.getNodeByName(WikiUtils.getAlfrescoNamePath(launchConfig.getInputFolderContextPath().toString()), nodeService);
    
    logger.debug("Server local working directory is " + serverLocalWorkingDir.getAbsolutePath());
    
    @SuppressWarnings("unchecked")
    List<InputFile> registeredInputs = (List<InputFile>) launchConfig.getTool().getProperty(VeloConstants.PROP_TOOL_INPUTS);
    List<ChildAssociationRef> children = nodeService.getChildAssocs(inputFolder);
    StringBuilder linksScript = new StringBuilder();
    String firstLine = "#!/bin/sh\n";

    // check if mandatory inputs are in the local working dir
    for (InputFile inputFile : registeredInputs) {
      // instead of looking for input files from the localWorkingDir, look in the alfresco
      // inputs folder. Then if the os is linux, create a sym link to the file from the alfresco
      // content store to the localWorkingDirectory and use that sym link as the file to add
      // to the inputFiles vector.
      boolean found = false;
      
      for (ChildAssociationRef child : children) {
        NodeRef childNode = child.getChildRef();
        String filename = (String)nodeService.getProperty(childNode, ContentModel.PROP_NAME);
        
        if(filename.matches(inputFile.getFileNameRegEx()) && nodeService.getType(childNode).equals(ContentModel.TYPE_CONTENT)){
          //if the childNode's name matches AND it is a file, copy it/create link to content
          found = true;
          File namedFile = new File(launchConfig.getLocalStagingDirectory(), filename);
          FileContentReader reader = (FileContentReader)contentService.getReader(childNode, ContentModel.PROP_CONTENT);
         
          if (SystemUtils.IS_OS_WINDOWS) {
             FileUtils.copyFile(reader.getFile(), namedFile);

          } else if (SystemUtils.IS_OS_LINUX || SystemUtils.IS_OS_SOLARIS || SystemUtils.IS_OS_UNIX) {

            // Use symbolic links
            String sourceFile = reader.getFile().getAbsolutePath();
            String linkFile = namedFile.getAbsolutePath();
            
            // Make sure to dereference links in the source
            //ln -s $(readlink -f alf_data/contentstore/2013/4/4/16/41/4fdd836b-82da-4ea5-8a85-d8e7daf9049d.bin)
            linksScript.append("ln -s $(readlink -f " + sourceFile + ") \"" + linkFile + "\";\n");
          }
          
          inputfiles.add(namedFile);
          
        } else if(filename.matches(inputFile.getFileNameRegEx()) && nodeService.getType(childNode).equals(ContentModel.TYPE_FOLDER)) {
          //if the childNode's name matches AND it is a folder, export it and all of its children recursively
          //TODO add logic to handle regex in path, not just in filename
          found = true;
          long exportStart = System.currentTimeMillis();
          export(childNode, serverLocalWorkingDir, linksScript);
          long exportEnd = System.currentTimeMillis();
          logger.info("Time to export folder " + filename + " = " + (exportEnd - exportStart)/1000 + " seconds");

          inputfiles.add(new File(launchConfig.getLocalStagingDirectory(), filename));
        }
      }
      
      if(!found && inputFile.isMandatory()) {
        throw new ExecException("Missing mandatory input " + inputFile.getFileNameRegEx());
      }
    }
    
    // Execute the script if necessary to actually create all the symbolic links
    if(!linksScript.toString().isEmpty()) {
      linksScript.insert(0, firstLine);
      File tempScriptFile = TempFileProvider.createTempFile("linkScript", ".sh");
      File runDir = TempFileProvider.getTempDir();
      tempScriptFile.deleteOnExit();
      FileOutputStream outputStream= null;
      try {
        outputStream = new FileOutputStream(tempScriptFile);
        org.apache.commons.io.IOUtils.write(linksScript.toString(), outputStream);

      } finally {
        if(outputStream != null) {
          org.apache.commons.io.IOUtils.closeQuietly(outputStream);
        }      
      }
      
      String chmodCmd[] = {"chmod", "777", tempScriptFile.getAbsolutePath() };
      WikiUtils.execCommand(chmodCmd, runDir);
      String scriptCmd[] = {tempScriptFile.getAbsolutePath()};
      long startScript = System.currentTimeMillis();
      WikiUtils.execCommand(scriptCmd, runDir);
      long endScript = System.currentTimeMillis();
      logger.info("Time to execute link script: " + (endScript - startScript)/1000 + " seconds");
      
    }
    
    //now set launchConfig files again 
    //- so that we eliminate any non mandatory files that are not in local dir
    launchConfig.setInputfiles(inputfiles);

    // add remote inputs
    @SuppressWarnings("unchecked")
    List<InputFile> remoteInputs = (List<InputFile>) launchConfig.getTool().getMachineSpecificProperty(launchConfig.getMachine().getName(), RegistryConstants.PROP_TOOL_REMOTE_INPUTS);
    if(remoteInputs!=null){
    for (InputFile inputFile : remoteInputs) {
      if (inputFile.isMandatory()) {
        launchConfig.getRemoteInputFiles().add(inputFile.getFileNameRegEx());
      } else {
        launchConfig.getOptionalRemoteInputFiles().add(inputFile.getFileNameRegEx());
      }
    }
    }
    long end = System.currentTimeMillis();
    logger.info("Time to create folder of input files to stage: " + (end-start)/1000 + " seconds");
  }
  
  /**
   * Method export.
   * @param exportNode NodeRef
   * @param destination File
   * @param linkScript StringBuilder
   */
  private void export(NodeRef exportNode, File destination, StringBuilder linkScript) {
    ExporterCrawlerParameters params = new ExporterCrawlerParameters();
    params.setCrawlChildNodes(true);
    params.setCrawlSelf(true);
    params.setCrawlAssociations(true);
    params.setCrawlContent(true);

    params.setExportFrom(new Location(exportNode));

    // perform the actual export
    this.exporterService.exportView(new LocalFileSystemExporter(nodeService, contentService, destination, linkScript), params, null);
  }

  public void setNodeService(NodeService nodeService) {
    this.nodeService = nodeService;
  }

  public void setContentService(ContentService contentService) {
    this.contentService = contentService;
  }

  public void setExporterService(ExporterService exporterService) {
    this.exporterService = exporterService;
  }

 
}
